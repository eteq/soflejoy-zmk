/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1000 // default 600, does not apply to pointing devices?
#define ZMK_POINTING_DEFAULT_SCRL_VAL 100 // the default is 10 which is way too slow for a fast response time

#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3


&sl {
    release-after-ms = <500>;
    /delete-property/ quick-release;
};


&soft_off {
    hold-time-ms = <1500>; // Only turn off it the key is held for these milliseconds or longer.
    /delete-property/ split-peripheral-off-on-press;
};

/ {

    behaviors {
        vol_encoder: behavior_vol_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
        };

        rgb_encoder: behavior_rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
        };

        mouse_up_down: behavior_mouse_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&mmv MOVE_UP>, <&mmv MOVE_DOWN>;
            tap-ms = < 25 >;
        };

        mouse_left_right: behavior_mouse_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&mmv MOVE_RIGHT>, <&mmv MOVE_LEFT>;
            tap-ms = < 25 >;
        };

        mouse_scroll_up_down: behavior_mouse_scroll_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;
            tap-ms = < 20 >;
        };

        mouse_scroll_left_right: behavior_mouse_scroll_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_RIGHT>, <&msc SCRL_LEFT>;
            tap-ms = < 20 >;
        };

        tdrshiftcaps: tap_dance_caps_r {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RSHIFT>, <&kp RSHIFT>, <&kp CAPSLOCK>;
        };


        tdlshiftcaps: tap_dance_caps_l {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHIFT>, <&kp LSHIFT>, <&kp CAPSLOCK>;
        };
    };

   // Activate ADJUST layer by pressing raise and lower
    conditional_layers {
        compatible = "zmk,conditional-layers";
        adjust_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
    };

    keymap {

        compatible = "zmk,keymap";

        default_layer {
            display-name = "default";

            bindings = <
&kp GRAVE &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp MINUS 
&kp TAB &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P &kp BSPC 
&kp ESC &kp A &kp S &kp D &kp F &kp G &kp H &kp J &kp K &kp L &kp SEMI &kp SQT 
&tdlshiftcaps &kp Z &kp X &kp C &kp V &kp B &mkp LCLK &mkp RCLK &kp N &kp M &kp COMMA &kp DOT &kp FSLH &tdrshiftcaps 
&kp LCTRL &kp LALT &mo LOWER &kp SPACE &kp LGUI &kp RCTRL &kp RET &mo RAISE &kp RALT &soft_off 

            >;

            sensor-bindings = <&mouse_scroll_up_down>;
        };

        lower_layer {
            display-name = "lower";

            bindings = <
&none &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &kp EQUAL 
&none &none &msc SCRL_LEFT &mmv MOVE_UP &msc SCRL_RIGHT &msc SCRL_UP &none &none &none &kp F11 &kp F12 &kp DEL 
&soft_off &none &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &msc SCRL_DOWN &none &none &none &none &none &kp PIPE 
&trans &none &mkp LCLK &mkp MCLK &mkp RCLK &none &kp C_MUTE &none &none &none &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp BACKSLASH &trans 
&trans &trans &trans &trans &kp RGUI &trans &trans &trans &trans &none 

            >;

            sensor-bindings = <&vol_encoder>;
        };

        raise_layer {
            display-name = "raise";

            bindings = <
&kp PSCRN &none &none &none &none &kp HOME &kp KP_NUM &kp KP_DIVIDE &kp KP_MULTIPLY &kp KP_MINUS &none &kp EQUAL 
&kp PAUSE_BREAK &none &none &kp UP &none &kp PG_UP &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_PLUS &kp INS &kp DEL 
&none &none &kp LEFT &kp DOWN &kp RIGHT &kp PG_DN &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_PLUS &none &kp PIPE 
&trans &kp K_UNDO &kp K_CUT &kp K_COPY &kp K_PASTE &kp END &trans &trans &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_ENTER &kp BACKSLASH &trans 
&trans &trans &trans &trans &kp RGUI &trans &trans &trans &trans &kp KP_N0 

            >;

            sensor-bindings = <&mouse_scroll_left_right>;
        };

        adjust_layer {
            display-name = "adjust";

            bindings = <
&rgb_ug RGB_TOG &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_DISC 0 &bt BT_DISC 1 &bt BT_DISC 2 &bt BT_DISC 3 &bt BT_DISC 4 &bt BT_CLR 
&rgb_ug RGB_TOG &rgb_ug RGB_BRI &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_SPI &rgb_ug RGB_EFF &out OUT_USB &out OUT_BLE &none &none &none &bt BT_CLR_ALL 
&rgb_ug RGB_TOG &rgb_ug RGB_BRD &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_SPD &rgb_ug RGB_EFR &out OUT_USB &out OUT_BLE &none &none &none &none 
&rgb_ug RGB_TOG &none &none &none &none &none &rgb_ug RGB_TOG &none &out OUT_USB &out OUT_BLE &none &none &none &none 
&none &none &none &none &none &none &none &none &none &ext_power EP_TOG 

            >;

            sensor-bindings = <&rgb_encoder>;
        };



    };
};

